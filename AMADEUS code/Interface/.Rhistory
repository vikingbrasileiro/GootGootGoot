par <- fit.gompertz(data_veh_calibration_loop$veh_per_cap, data_veh_calibration_loop$GDP_per_cap, lower_bounds, upper_bounds)
alpha <- c(alpha, par$alpha)
}
message(paste0("Calibration of alpha parameter finished"))
alpha = mean(alpha)
##2.2 On fixe alpha et on calcule beta et gammma pour chaque pays
lower_bounds <- c(0, alpha, -1)
upper_bounds <- c(0.8, alpha, 0)
gamma <- NULL
beta <- NULL
for(i in 1:nlevels(as.factor(data_veh_calibration$Country)))
{
data_veh_calibration_loop <-  data_veh_calibration[data_veh_calibration$Country == levels(as.factor(data_veh_calibration$Country))[i],]
message(paste0("Calibration of gamma and beta parameters for ", levels(as.factor(data_veh_calibration$Country))[i], " started"))
par <- fit.gompertz(data_veh_calibration_loop$veh_per_cap, data_veh_calibration_loop$GDP_per_cap, lower_bounds, upper_bounds)
message(paste0("Calibration of gamma and beta parameters for ", levels(as.factor(data_veh_calibration$Country))[i], " finished"))
gamma <- c(gamma, par$mean_gamma)
beta <- c(beta, par$beta)
}
names(gamma) <- levels(as.factor(data_veh_calibration$Country))
names(beta) <- levels(as.factor(data_veh_calibration$Country))
##2.3 recalibration si necessaire
min_beta <- beta["NO"]
max_beta <- beta["BG"]
list_country_weird <- names(c( beta[beta < max_beta], beta[beta > min_beta]))
lower_bounds <- c(0, alpha, max_beta)
upper_bounds <- c(0.8, alpha, min_beta)
for(i in 1:length(list_country_weird))
{
message(paste0("Recalibration of ", list_country_weird[i], " started"))
par <- fit.gompertz(data_veh_calibration[data_veh_calibration$Country == list_country_weird[i],]$veh_per_cap, data_veh_calibration[data_veh_calibration$Country == list_country_weird[i],]$GDP_per_cap, lower_bounds, upper_bounds)
message(paste0("Recalibration of ", list_country_weird[i], " finished"))
gamma[list_country_weird[i]] <- par$mean_gamma
beta[list_country_weird[i]] <- par$beta
}
##2.5 projection of total car stock for each country
total_car_hist_vehicle_stock <- Sort_By_Country(total_car_hist_vehicle_stock)
total_car_trajectories_vehicle_stock <- total_car_hist_vehicle_stock
Proj_GDP_per_capita <- Sort_By_Country(Proj_GDP_per_capita)
Population <- Sort_By_Country(Population)
Year_Proj <- min(which(is.nan(colSums(total_car_trajectories_vehicle_stock[10:length(total_car_trajectories_vehicle_stock)])))) + 9
for(i in 1:nrow(total_car_trajectories_vehicle_stock))
{
total_car_trajectories_vehicle_stock[i, (Year_Proj-1):length(total_car_trajectories_vehicle_stock)] <- formula.gompertz(Proj_GDP_per_capita[i, (Year_Proj-1):length(Proj_GDP_per_capita)], gamma[i], alpha, beta[i]) * Population[i, (Year_Proj-1):length(Population)]
}
total_car_proj_vehicle_stock <- total_car_hist_vehicle_stock
for(i in Year_Proj:length(total_car_proj_vehicle_stock))
{
total_car_proj_vehicle_stock[, i] <- total_car_proj_vehicle_stock[, i-1] * total_car_trajectories_vehicle_stock[,i] / total_car_trajectories_vehicle_stock[,i-1]
}
car_proj_pkm <- Extract_Usage(Proj_pkm, "car")
proj_annual_distance_car <- Sort_By_Country(Hist_annual_distance_car)
proj_annual_distance_car[,Year_Proj:length(proj_annual_distance_car)] <- car_proj_pkm[,Year_Proj:length(car_proj_pkm)] / (proj_passenger_per_vehicle[,Year_Proj:length(proj_passenger_per_vehicle)] * total_car_proj_vehicle_stock[,Year_Proj:length(total_car_proj_vehicle_stock)]) * 1000000
final_data <- list( "total_car_proj_vehicle_stock" = total_car_proj_vehicle_stock, "proj_annual_distance_car" = proj_annual_distance_car)
write.csv2(c("gamma" = gamma, "alpha" = alpha, "beta" = beta), file = "../../Data/temp/veh_per_cap_calibration_parameters.csv")
return(final_data)
}
#################################################################
# Function for pkm projection
#################################################################
transform_data_pkm <- function(input)
{
GDP_per_cap <- NULL
pkm_per_cap <- NULL
for(i in 1:nrow(input$GDP_per_cap))
{
GDP_per_cap <- c(GDP_per_cap, input$GDP_per_cap[i,])
pkm_per_cap <- c(pkm_per_cap, input$pkm_per_cap[i,])
}
final_data = data.frame("Country" = rep(rownames(input$GDP_per_cap), each = 17), "GDP_per_cap" = unlist(GDP_per_cap), "pkm_per_cap" = unlist(pkm_per_cap))
final_data <- final_data[order(final_data$GDP_per_cap),]
return(final_data)
}
formula_logistic <- function(GDP_per_cap, gamma, beta, alpha)
{
y <- GDP_per_cap
y <- gamma + beta / (1 + exp( alpha * GDP_per_cap))
return(y)
}
sse_formula.logistic <- function(pkm_per_cap, GDP_per_cap, calibrated_parameters)
{
gamma <- calibrated_parameters[1]
beta <- calibrated_parameters[2]
alpha <- calibrated_parameters[3]
y <- sum( ( pkm_per_cap[1:length(pkm_per_cap)] - formula_logistic(GDP_per_cap, gamma, beta, alpha) )^2 )
return(y)
}
fit.pkm <- function(pkm_per_capita, GDP_per_capita)
{
lower_bounds<- c(-10000, 0, -0.1)
upper_bounds<- c(0, 50000, 0)
par <- direct(fn = sse_formula.logistic, pkm_per_cap = pkm_per_capita, GDP_per_cap = GDP_per_capita, lower = lower_bounds , upper = upper_bounds, control = list(maxeval = 10000))$par
gamma <- par[1]
beta <- par[2]
alpha <- par[3]
final_data = list("gamma" = gamma, "beta" = beta, "alpha" = alpha)
return(final_data)
}
transport_hist_pkm_calibration_and_projection <- function(data_pkm_calibration, Hist_Assumption, Proj_Macro)
{
#on exclue BG et SI car statistiquement etrange
data_pkm_calibration <- droplevels(subset(data_pkm_calibration, Country != "BG"))
data_pkm_calibration <- droplevels(subset(data_pkm_calibration, Country != "SI"))
#On calcule les parametre de la fonction logistique qui match le mieux au data
results_pkm_calibration <- fit.pkm(data_pkm_calibration$pkm_per_cap, data_pkm_calibration$GDP_per_cap)
#projection des pkm  pour chaque pays
Proj_GDP_per_cap <- Extract_Item(Proj_Macro,"GDP per capita")
Proj_GDP_per_cap <- Sort_By_Country(Proj_GDP_per_cap)
Hist_pkm_per_cap <- Extract_Item(Hist_Assumption, "Passenger traffic per capita")
Proj_pkm_per_cap <- Hist_pkm_per_cap
## l'erruer vient d'ici, l'annÃ©e de proj est inf, Hermence
Year_proj <- min(which(is.nan(colSums(Proj_pkm_per_cap[10:length(Proj_pkm_per_cap)])))) + 9
for(i in (Year_proj-1):length(Proj_GDP_per_cap))
{
Proj_pkm_per_cap[,i] <- formula_logistic(Proj_GDP_per_cap[,i], results_pkm_calibration$gamma, results_pkm_calibration$beta, results_pkm_calibration$alpha)
}
#on colle les trajectoires sur les points de depart
pkm_per_cap <- Extract_Item(Hist_Assumption, "Passenger traffic per capita")
for(i in Year_proj:length(pkm_per_cap))
{
pkm_per_cap[,i] <- (Proj_pkm_per_cap[,i]/Proj_pkm_per_cap[,i-1]) * pkm_per_cap[,i-1]
}
Proj_Population <- Sort_By_Country(Extract_Item(Proj_Macro,"Population"))
total_pkm <- pkm_per_cap
total_pkm$ID_Item <- "Passenger traffic"
total_pkm$Unit <- "Gpkm"
total_pkm[,10:length(total_pkm)] <- pkm_per_cap[,10:length(pkm_per_cap)] * Proj_Population[,10:length(Proj_Population)] * (1000 / 1000000000)
#Allocation des pkm en fonction du type de transport (air, Marine or Road)
Hist_pkm <- Extract_Usage(Extract_Item(Hist_Assumption, "Passenger traffic"), "total")
Hist_pkm <- Sort_By_Country(Hist_pkm)
Hist_pkm <- Hist_pkm[order(Hist_pkm$Sub_Sector),]
Hist_share_pkm <- Hist_pkm
Hist_share_pkm$ID_Item <- "Share in passenger traffic"
Hist_share_pkm$Unit <- "%"
for(i in 1:nrow(Hist_share_pkm))
{
Hist_share_pkm[i,10:length(Hist_share_pkm)] <- Hist_pkm[i,10:length(Hist_pkm)] / Extract_Sub_Sector(Hist_pkm, "total")[Extract_Sub_Sector(Hist_pkm, "total")$Country == Hist_pkm$Country[i] ,10:length( Extract_Sector(Hist_pkm, "total"))]
}
Proj_share_pkm <- Hist_share_pkm
Proj_share_pkm[,Year_proj:length(Proj_share_pkm)] <- Hist_share_pkm[,(Year_proj-1)]
Proj_pkm <- Hist_pkm
Proj_pkm[Proj_pkm$Sub_Sector == "total",] <- total_pkm
for(i in 1:nrow(Proj_pkm))
{
Proj_pkm[i,Year_proj:length(Proj_pkm)] <- Proj_share_pkm[i, Year_proj:length(Proj_share_pkm)] * Extract_Sub_Sector(Proj_pkm, "total")[Extract_Sub_Sector(Proj_pkm, "total")$Country == Proj_pkm$Country[i] ,Year_proj:length(Proj_pkm)]
}
#Puis Allocation des pkm pour le sous secteur Road (2wheels bus and cars)
Hist_Road_pkm <- Extract_Sub_Sector(Extract_Item(Hist_Assumption, "Passenger traffic"), "Road")
Hist_Road_pkm <- Sort_By_Country(Hist_Road_pkm)
Hist_Road_pkm <- Hist_Road_pkm[order(Hist_Road_pkm$Usage),]
Hist_share_Road_pkm <- Hist_Road_pkm
Hist_share_Road_pkm$ID_Item <- "Share in passenger traffic"
Hist_share_Road_pkm$Unit <- "%"
for(i in 1:nrow(Hist_share_Road_pkm))
{
Hist_share_Road_pkm[i,10:length(Hist_share_Road_pkm)] <- Hist_Road_pkm[i,10:length(Hist_Road_pkm)] / Extract_Usage(Hist_Road_pkm, "total")[Extract_Usage(Hist_Road_pkm, "total")$Country == Hist_Road_pkm$Country[i] ,10:length(Hist_Road_pkm)]
}
Proj_share_Road_pkm <- Hist_share_Road_pkm
Proj_share_Road_pkm[,Year_proj:length(Proj_share_Road_pkm)] <- Hist_share_Road_pkm[,(Year_proj-1)]
Proj_Road_pkm <- Hist_Road_pkm
Proj_Road_pkm[Proj_Road_pkm$Usage == "total",] <- Proj_pkm[Proj_pkm$Sub_Sector == "Road" & Proj_pkm$Usage == "total",]
for(i in 1:nrow(Proj_Road_pkm))
{
Proj_Road_pkm[i,Year_proj:length(Proj_Road_pkm)] <- Proj_share_Road_pkm[i, Year_proj:length(Proj_share_Road_pkm)] * Extract_Usage(Proj_Road_pkm, "total")[Extract_Usage(Proj_Road_pkm, "total")$Country == Proj_Road_pkm$Country[i] ,Year_proj:length(Proj_Road_pkm)]
}
Proj_pkm <- rbind(Proj_pkm, Proj_Road_pkm[Proj_Road_pkm$Usage !="total",])
Final_data <- list("Proj_pkm" = Proj_pkm, "gamma" = results_pkm_calibration$gamma, "beta" = results_pkm_calibration$beta, "alpha" = results_pkm_calibration$alpha)
write.csv2(c("gamma" = Final_data$gamma, "beta" = Final_data$beta, "alpha" = Final_data$alpha), file = "../../Data/temp/pkm_calibration_parameters.csv")
return(Final_data)
}
#################################################################
# Function for fleet model
#################################################################
simulate_stock_model_projection <- function(hist_fleet, destruction_rate, market_share_in_new, total_stock_projection, hist_car_average_efficiency, hist_new_car_efficiency, proj_new_car_efficiency, Proj_Assumption)
{
#1. Stock projection
Year_proj <- min(which(is.nan(colSums(hist_fleet[10:length(hist_fleet)])))) + 9
destructed_vehicle <- total_stock_projection
destructed_vehicle[,10] <- NaN
for(i in 11:length(destructed_vehicle))
{
destructed_vehicle[,i] <- total_stock_projection[,i-1] * destruction_rate[,i]
}
destruction_rate_bis <- destruction_rate
destruction_rate_bis <- destruction_rate_bis[ rep( seq_len( nrow( destruction_rate_bis ) ), nlevels( as.factor( market_share_in_new$Energy ) ) ), ]
total_sales_vehicle <- total_stock_projection
total_sales_vehicle[,10] <- NaN
total_sales_vehicle$ID_Item <- "Sales of new vehicle"
for(i in 11:length(total_sales_vehicle))
{
total_sales_vehicle[,i] <- total_stock_projection[,i] - total_stock_projection[i-1] + destructed_vehicle[,i]
}
total_sales_vehicle_bis <- total_sales_vehicle
total_sales_vehicle_bis <- total_sales_vehicle_bis[ rep( seq_len( nrow( total_sales_vehicle_bis ) ), nlevels( as.factor( market_share_in_new$Energy ) ) ), ]
#2. Average efficiency projection
real_proj_new_car_efficiency <- hist_new_car_efficiency
for(i in Year_proj:length(hist_new_car_efficiency))
{
real_proj_new_car_efficiency[,i] <- real_proj_new_car_efficiency[,(i-1)] * (proj_new_car_efficiency[,i] / proj_new_car_efficiency[,(i-1)])
}
proj_fleet <- hist_fleet
k = 0
before_destruction <- NULL
destructed_vehicle_loop <- NULL
real_destructed_vehicle <- market_share_in_new
real_destructed_vehicle$ID_Item <- "Destructed vehicle"
real_destructed_vehicle[,11:Year_proj] <- NaN
# fisrt loop of stock projection
for(j in 1:nrow(proj_fleet))
{
for(i in Year_proj:length(proj_fleet))
{
before_destruction <-  proj_fleet[j,i-1] + (total_sales_vehicle_bis[j,i] * market_share_in_new[j,i])
if(round(sum(market_share_in_new[j,i:length(market_share_in_new)], na.rm = T),2) == 0 )
{
if( k == 0)
{
k = i-1
}
destructed_vehicle_loop <- destruction_rate_bis[j,i] * proj_fleet[j,k-5]
}
else
{
destructed_vehicle_loop <- destruction_rate_bis[j,i] * proj_fleet[j,i-1]
}
proj_fleet[j,i] <- max(before_destruction - destructed_vehicle_loop,0)
real_destructed_vehicle[j,i] <- destructed_vehicle_loop
}
i = Year_proj
k = 0
}
browser()
# second loop of stock projection : recalculation of sales (difference si stock en dessous atteint zero sur horizon de projection )
check_total_stock_projection_value <- aggregate(x = proj_fleet[,10:length(proj_fleet)], by = proj_fleet[c("Country", "Usage")], FUN = sum)
check_total_stock_projection_header  <- proj_fleet[1:nrow(check_total_stock_projection_value), 1:9]
check_total_stock_projection_header$Energy <- "total"
check_total_stock_projection_header$Country <- check_total_stock_projection_value$Country
check_total_stock_projection_header$Sub_Sector <- "Road"
check_total_stock_projection_header$Usage <- check_total_stock_projection_value$Usage
check_total_stock_projection <- unique(cbind(check_total_stock_projection_header, check_total_stock_projection_value[,-(1:2)]))
check_total_stock_projection[,11:length(check_total_stock_projection)] <- total_stock_projection[,11:length(total_stock_projection)] - check_total_stock_projection[,11:length(check_total_stock_projection)]
sales_to_add <- check_total_stock_projection
sales_to_add <- sales_to_add[ rep( seq_len( nrow( sales_to_add ) ),  nlevels( as.factor( market_share_in_new$Energy ) ) ), ]
real_sales_new_vehicle <- total_sales_vehicle_bis
real_sales_new_vehicle$Energy <- market_share_in_new$Energy
real_sales_new_vehicle[,11:Year_proj] <- NaN
for(i in Year_proj:length(sales_to_add))
{
real_sales_new_vehicle[,i] <-  (total_sales_vehicle_bis[,i] + sales_to_add[,i]) * market_share_in_new[,i]
sales_to_add[,i] <- sales_to_add[,i] * market_share_in_new[,i]
}
# browser()
proj_average_efficiency <- hist_car_average_efficiency
for(j in 1:nrow(proj_fleet))
{
for(i in Year_proj:length(proj_fleet))
{
proj_fleet[j,i] <- proj_fleet[j,i] + sales_to_add[j,i]
real_destructed_vehicle[j,i] <- proj_fleet[j,i-1] - proj_fleet[j,i] + real_sales_new_vehicle[j,i]
if(proj_fleet[j,i] < 0.001)
{
proj_average_efficiency[j,i] = proj_average_efficiency[j,i-1]
}
else
{
proj_average_efficiency[j,i] <- ( proj_average_efficiency[j,i-1] * proj_fleet[j,i-1] - (rowMeans(proj_average_efficiency[j,(i-10):(i-1)])) * real_destructed_vehicle[j,i] + real_sales_new_vehicle[j,i] * real_proj_new_car_efficiency[j,i] )/ proj_fleet[j,i]
}
}
}
Proj_Assumption <- readRDS("../../Data/temp/Proj_Assumption.RDS")
saveRDS(rbind(Proj_Assumption,
real_destructed_vehicle,
real_sales_new_vehicle),
"../../Data/temp/Proj_Assumption.RDS")
final_data <- list("proj_fleet" = proj_fleet, "proj_average_efficiency" = proj_average_efficiency, "proj_new_efficiency" = real_proj_new_car_efficiency)
return(final_data)
}
#################################################################
# Function for tkm projection
#################################################################
transform_data_tkm <- function(input)
{
GDP_per_cap <- NULL
tkm_per_infra <- NULL
for(i in 1:nrow(input$GDP))
{
GDP_per_cap <- c(GDP_per_cap, input$GDP_per_cap[i,])
tkm_per_infra <- c(tkm_per_infra, input$tkm_per_infra[i,])
}
final_data = data.frame("Country" = rep(rownames(input$GDP_per_cap), each = 17), "GDP_per_cap" = unlist(GDP_per_cap), "tkm_per_infra" = unlist(tkm_per_infra))
final_data <- final_data[order(final_data$GDP_per_cap),]
return(final_data)
}
transport_hist_tkm_projection <- function(Hist_Assumption, Proj_Macro, Proj_Assumption)
{
GDP <- Sort_By_Country(Extract_Item(Proj_Macro, "GDP"))
Hist_total_tkm <- Sort_By_Country(Extract_Sub_Sector(Extract_Item(Hist_Assumption, "Goods traffic"), "total"))
elasticity_tkm_GDP <- Sort_By_Country(Extract_Item(Proj_Assumption, "Elasticity tkm to GDP"))
Proj_total_tkm <- Hist_total_tkm
Year_Proj <- min(which(is.nan(colSums(Hist_total_tkm[10:length(Hist_total_tkm)])))) + 9
for(i in Year_Proj:length(Proj_total_tkm))
{
Proj_total_tkm[,i] <- Proj_total_tkm[,i-1] * (1 + elasticity_tkm_GDP[,i] * (GDP[,i]/GDP[,i-1] - 1))
}
#Allocation des tkm en fonction du type de transport (air, Marine or Road)
Hist_tkm <- Extract_Usage(Extract_Item(Hist_Assumption, "Goods traffic"), "total")
Hist_tkm <- Sort_By_Country(Hist_tkm)
Hist_tkm <- Hist_tkm[order(Hist_tkm$Sub_Sector),]
Hist_share_tkm <- Hist_tkm
Hist_share_tkm$ID_Item <- "Share in Goods traffic"
Hist_share_tkm$Unit <- "%"
for(i in 1:nrow(Hist_share_tkm))
{
Hist_share_tkm[i,10:length(Hist_share_tkm)] <- Hist_tkm[i,10:length(Hist_tkm)] / Extract_Sub_Sector(Hist_tkm, "total")[Extract_Sub_Sector(Hist_tkm, "total")$Country == Hist_tkm$Country[i] ,10:length( Extract_Sector(Hist_tkm, "total"))]
}
Proj_share_tkm <- Hist_share_tkm
Proj_share_tkm[,Year_Proj:length(Proj_share_tkm)] <- Hist_share_tkm[,(Year_Proj-1)]
Proj_tkm <- Hist_tkm
Proj_tkm[Proj_tkm$Sub_Sector == "total",] <- Proj_total_tkm
for(i in 1:nrow(Proj_tkm))
{
Proj_tkm[i,Year_Proj:length(Proj_tkm)] <- Proj_share_tkm[i, Year_Proj:length(Proj_share_tkm)] * Extract_Sub_Sector(Proj_tkm, "total")[Extract_Sub_Sector(Proj_tkm, "total")$Country == Proj_tkm$Country[i] ,Year_Proj:length(Proj_tkm)]
}
#Puis Allocation des tkm pour le sous secteur Road (2wheels bus and cars)
Hist_Road_tkm <- Extract_Sub_Sector(Extract_Item(Hist_Assumption, "Goods traffic"), "Road")
Hist_Road_tkm <- Sort_By_Country(Hist_Road_tkm)
Hist_Road_tkm <- Hist_Road_tkm[order(Hist_Road_tkm$Usage),]
Hist_share_Road_tkm <- Hist_Road_tkm
Hist_share_Road_tkm$ID_Item <- "Share in Goods traffic"
Hist_share_Road_tkm$Unit <- "%"
for(i in 1:nrow(Hist_share_Road_tkm))
{
Hist_share_Road_tkm[i,10:length(Hist_share_Road_tkm)] <- Hist_Road_tkm[i,10:length(Hist_Road_tkm)] / Extract_Usage(Hist_Road_tkm, "total")[Extract_Usage(Hist_Road_tkm, "total")$Country == Hist_Road_tkm$Country[i] ,10:length(Hist_Road_tkm)]
}
Proj_share_Road_tkm <- Hist_share_Road_tkm
Proj_share_Road_tkm[,Year_Proj:length(Proj_share_Road_tkm)] <- Hist_share_Road_tkm[,(Year_Proj-1)]
Proj_Road_tkm <- Hist_Road_tkm
Proj_Road_tkm[Proj_Road_tkm$Usage == "total",] <- Proj_tkm[Proj_tkm$Sub_Sector == "Road" & Proj_tkm$Usage == "total",]
for(i in 1:nrow(Proj_Road_tkm))
{
Proj_Road_tkm[i,Year_Proj:length(Proj_Road_tkm)] <- Proj_share_Road_tkm[i, Year_Proj:length(Proj_share_Road_tkm)] * Extract_Usage(Proj_Road_tkm, "total")[Extract_Usage(Proj_Road_tkm, "total")$Country == Proj_Road_tkm$Country[i] ,Year_Proj:length(Proj_Road_tkm)]
}
Proj_tkm <- rbind(Proj_tkm, Proj_Road_tkm[Proj_Road_tkm$Usage !="total",])
return(Proj_tkm)
}
###################################################### Aggregat #######################################################
calculate_total_sector_TRA <- function(input)
{
input <- droplevels(subset(input, Energy != "total"))
input_road <- Extract_Sub_Sector(input,"Road")
TRA_Proj_Demand_Country_Usage_Road_total_value <- aggregate(x = input_road[,10:length(input_road)], by = input_road[c("Country", "Usage")], FUN = sum)
TRA_Proj_Demand_Country_Usage_Road_total_header  <- input_road[1:nrow(TRA_Proj_Demand_Country_Usage_Road_total_value), 1:9]
TRA_Proj_Demand_Country_Usage_Road_total_header$Energy <- "total"
TRA_Proj_Demand_Country_Usage_Road_total_header$Country <- TRA_Proj_Demand_Country_Usage_Road_total_value$Country
TRA_Proj_Demand_Country_Usage_Road_total_header$Sub_Sector <- "Road"
TRA_Proj_Demand_Country_Usage_Road_total_header$Usage <- TRA_Proj_Demand_Country_Usage_Road_total_value$Usage
TRA_Proj_Demand_Country_Usage_Road_total <- unique(cbind(TRA_Proj_Demand_Country_Usage_Road_total_header, TRA_Proj_Demand_Country_Usage_Road_total_value[,-(1:2)]))
TRA_Proj_Demand_Country_Energy_Road_total_value <- aggregate(x = input_road[,10:length(input_road)], by = input_road[c("Country", "Energy")], FUN = sum)
TRA_Proj_Demand_Country_Energy_Road_total_header  <- input_road[1:nrow(TRA_Proj_Demand_Country_Energy_Road_total_value), 1:9]
TRA_Proj_Demand_Country_Energy_Road_total_header$Energy <- TRA_Proj_Demand_Country_Energy_Road_total_value$Energy
TRA_Proj_Demand_Country_Energy_Road_total_header$Country <- TRA_Proj_Demand_Country_Energy_Road_total_value$Country
TRA_Proj_Demand_Country_Energy_Road_total_header$Sub_Sector <- "Road"
TRA_Proj_Demand_Country_Energy_Road_total_header$Usage <- "total"
TRA_Proj_Demand_Country_Energy_Road_total <- unique(cbind(TRA_Proj_Demand_Country_Energy_Road_total_header, TRA_Proj_Demand_Country_Energy_Road_total_value[,-(1:2)]))
TRA_Proj_Demand_Country_total_value <- aggregate(x = input[,10:length(input)], by = input[c("Country")], FUN = sum)
TRA_Proj_Demand_Country_total_header  <- input[1:nrow(TRA_Proj_Demand_Country_total_value), 1:9]
TRA_Proj_Demand_Country_total_header$Energy <- "total"
TRA_Proj_Demand_Country_total_header$Country <- TRA_Proj_Demand_Country_total_value$Country
TRA_Proj_Demand_Country_total_header$Sub_Sector <- "total"
TRA_Proj_Demand_Country_total_header$Usage <- "total"
TRA_Proj_Demand_Country_total <- unique(cbind(TRA_Proj_Demand_Country_total_header, TRA_Proj_Demand_Country_total_value[,-1]))
TRA_Proj_Demand_Country_Energy_total_value <- aggregate(x = input[,10:length(input)], by = input[c("Country", "Energy")], FUN = sum)
TRA_Proj_Demand_Country_Energy_total_header  <- input[1:nrow(TRA_Proj_Demand_Country_Energy_total_value), 1:9]
TRA_Proj_Demand_Country_Energy_total_header$Energy <- TRA_Proj_Demand_Country_Energy_total_value$Energy
TRA_Proj_Demand_Country_Energy_total_header$Country <- TRA_Proj_Demand_Country_Energy_total_value$Country
TRA_Proj_Demand_Country_Energy_total_header$Sub_Sector <- "total"
TRA_Proj_Demand_Country_Energy_total_header$Usage <- "total"
TRA_Proj_Demand_Country_Energy_total <- unique(cbind(TRA_Proj_Demand_Country_Energy_total_header, TRA_Proj_Demand_Country_Energy_total_value[,-(1:2)]))
TRA_Proj_Demand_Country_Sub_Sector_total_value <- aggregate(x = input[,10:length(input)], by = input[c("Country", "Sub_Sector")], FUN = sum)
TRA_Proj_Demand_Country_Sub_Sector_total_header  <- input[1:nrow(TRA_Proj_Demand_Country_Sub_Sector_total_value), 1:9]
TRA_Proj_Demand_Country_Sub_Sector_total_header$Energy <- "total"
TRA_Proj_Demand_Country_Sub_Sector_total_header$Country <- TRA_Proj_Demand_Country_Sub_Sector_total_value$Country
TRA_Proj_Demand_Country_Sub_Sector_total_header$Sub_Sector <- TRA_Proj_Demand_Country_Sub_Sector_total_value$Sub_Sector
TRA_Proj_Demand_Country_Sub_Sector_total_header$Usage <- "total"
TRA_Proj_Demand_Country_Sub_Sector_total <- unique(cbind(TRA_Proj_Demand_Country_Sub_Sector_total_header, TRA_Proj_Demand_Country_Sub_Sector_total_value[,-(1:2)]))
#####EU 23
TRA_Proj_Demand_EU23_Energy_total_value <- aggregate(x = input[,10:length(input)], by = input[c("Energy")], FUN = sum)
TRA_Proj_Demand_EU23_Energy_total_header  <- input[1:nrow(TRA_Proj_Demand_EU23_Energy_total_value), 1:9]
TRA_Proj_Demand_EU23_Energy_total_header$Energy <- TRA_Proj_Demand_EU23_Energy_total_value$Energy
TRA_Proj_Demand_EU23_Energy_total_header$Country <- "EU23"
TRA_Proj_Demand_EU23_Energy_total_header$Sub_Sector <- "total"
TRA_Proj_Demand_EU23_Energy_total_header$Usage <- "total"
TRA_Proj_Demand_EU23_Energy_total <- unique(cbind(TRA_Proj_Demand_EU23_Energy_total_header, TRA_Proj_Demand_EU23_Energy_total_value[,-1]))
TRA_Proj_Demand_EU23_Sub_Sector_total_value <- aggregate(x = input[,10:length(input)], by = input[c("Sub_Sector")], FUN = sum)
TRA_Proj_Demand_EU23_Sub_Sector_total_header  <- input[1:nrow(TRA_Proj_Demand_EU23_Sub_Sector_total_value), 1:9]
TRA_Proj_Demand_EU23_Sub_Sector_total_header$Energy <- "total"
TRA_Proj_Demand_EU23_Sub_Sector_total_header$Country <- "EU23"
TRA_Proj_Demand_EU23_Sub_Sector_total_header$Sub_Sector <- TRA_Proj_Demand_EU23_Sub_Sector_total_value$Sub_Sector
TRA_Proj_Demand_EU23_Sub_Sector_total_header$Usage <- "total"
TRA_Proj_Demand_EU23_Sub_Sector_total <- unique(cbind(TRA_Proj_Demand_EU23_Sub_Sector_total_header, TRA_Proj_Demand_EU23_Sub_Sector_total_value[,-1]))
#on calcule le total EU23 pour chaques energy
TRA_Proj_Demand_EU23_Usage_total_value <- aggregate(x = input[,10:length(input)], by = input[c("Usage")], FUN = sum)
TRA_Proj_Demand_EU23_Usage_total_header  <- input[1:nrow(TRA_Proj_Demand_EU23_Usage_total_value), 1:9]
TRA_Proj_Demand_EU23_Usage_total_header$Energy <- "total"
TRA_Proj_Demand_EU23_Usage_total_header$Country <- "EU23"
TRA_Proj_Demand_EU23_Usage_total_header$Sub_Sector <- "total"
TRA_Proj_Demand_EU23_Usage_total_header$Usage <- TRA_Proj_Demand_EU23_Usage_total_value$Usage
TRA_Proj_Demand_EU23_Usage_total <- unique(cbind(TRA_Proj_Demand_EU23_Usage_total_header, TRA_Proj_Demand_EU23_Usage_total_value[,-1]))
TRA_Proj_Demand_EU23_Usage_total <- TRA_Proj_Demand_EU23_Usage_total[TRA_Proj_Demand_EU23_Usage_total$Usage !="total",]
TRA_Proj_Demand_EU23_Usage_Energy_total_value <- aggregate(x = input[,10:length(input)], by = input[c("Energy", "Usage")], FUN = sum)
TRA_Proj_Demand_EU23_Usage_Energy_total_header  <- input[1:nrow(TRA_Proj_Demand_EU23_Usage_Energy_total_value), 1:9]
TRA_Proj_Demand_EU23_Usage_Energy_total_header$Energy <- TRA_Proj_Demand_EU23_Usage_Energy_total_value$Energy
TRA_Proj_Demand_EU23_Usage_Energy_total_header$Country <- "EU23"
TRA_Proj_Demand_EU23_Usage_Energy_total_header$Sub_Sector <- "total"
TRA_Proj_Demand_EU23_Usage_Energy_total_header$Usage <- TRA_Proj_Demand_EU23_Usage_Energy_total_value$Usage
TRA_Proj_Demand_EU23_Usage_Energy_total <- unique(cbind(TRA_Proj_Demand_EU23_Usage_Energy_total_header, TRA_Proj_Demand_EU23_Usage_Energy_total_value[,-(1:2)]))
TRA_Proj_Demand_EU23_Usage_Energy_total <- TRA_Proj_Demand_EU23_Usage_Energy_total[TRA_Proj_Demand_EU23_Usage_Energy_total$Usage !="total",]
TRA_Proj_Demand_EU23_Sub_Sector_Energy_total_value <- aggregate(x = input[,10:length(input)], by = input[c("Energy", "Sub_Sector")], FUN = sum)
TRA_Proj_Demand_EU23_Sub_Sector_Energy_total_header  <- input[1:nrow(TRA_Proj_Demand_EU23_Sub_Sector_Energy_total_value), 1:9]
TRA_Proj_Demand_EU23_Sub_Sector_Energy_total_header$Energy <- TRA_Proj_Demand_EU23_Sub_Sector_Energy_total_value$Energy
TRA_Proj_Demand_EU23_Sub_Sector_Energy_total_header$Country <- "EU23"
TRA_Proj_Demand_EU23_Sub_Sector_Energy_total_header$Sub_Sector <- TRA_Proj_Demand_EU23_Sub_Sector_Energy_total_value$Sub_Sector
TRA_Proj_Demand_EU23_Sub_Sector_Energy_total_header$Usage <- "total"
TRA_Proj_Demand_EU23_Sub_Sector_Energy_total <- unique(cbind(TRA_Proj_Demand_EU23_Sub_Sector_Energy_total_header, TRA_Proj_Demand_EU23_Sub_Sector_Energy_total_value[,-(1:2)]))
TRA_Proj_Demand_EU23_total_value <- aggregate(x = input[,10:length(input)], by = input[c("Sector")], FUN = sum)
TRA_Proj_Demand_EU23_total_header  <- input[1:nrow(TRA_Proj_Demand_EU23_total_value), 1:9]
TRA_Proj_Demand_EU23_total_header$Energy <- "total"
TRA_Proj_Demand_EU23_total_header$Country <- "EU23"
TRA_Proj_Demand_EU23_total_header$Sub_Sector <- "total"
TRA_Proj_Demand_EU23_total_header$Usage <- "total"
TRA_Proj_Demand_EU23_total_header$Sector <- TRA_Proj_Demand_EU23_total_value$Sector
TRA_Proj_Demand_EU23_total <- unique(cbind(TRA_Proj_Demand_EU23_total_header, TRA_Proj_Demand_EU23_total_value[,-1]))
input <- rbind(input, TRA_Proj_Demand_Country_total, TRA_Proj_Demand_Country_Energy_total, TRA_Proj_Demand_EU23_Energy_total, TRA_Proj_Demand_EU23_Sub_Sector_Energy_total, TRA_Proj_Demand_EU23_Usage_Energy_total, TRA_Proj_Demand_EU23_Sub_Sector_total,  TRA_Proj_Demand_EU23_Usage_total,  TRA_Proj_Demand_EU23_total, TRA_Proj_Demand_Country_Sub_Sector_total, TRA_Proj_Demand_Country_Usage_Road_total, TRA_Proj_Demand_Country_Energy_Road_total)
return(input)
}
Calibration_pkm_tkm_stock_TRA(Hist_Macro, Hist_Assumption, Proj_Macro, Proj_Assumption, Hist_Energy_Demand)
View(check_total_stock_projection_value)
runApp()
main_projection_energy_demand_AGR(Hist_Energy_Demand, Proj_Assumption)
main_projection_energy_demand_AGR <- function(Hist_Energy_Demand, Proj_Assumption)
{
browser()
#1. Data input extraction
AGR_Hist_Energy_Demand <- Extract_Sector(Hist_Energy_Demand, "AGR")
AGR_Hist_Energy_Demand <- Sort_By_Country(AGR_Hist_Energy_Demand)
AGR_Hist_Energy_Demand <- AGR_Hist_Energy_Demand[order(AGR_Hist_Energy_Demand$Energy),]
AGR_Hist_Energy_Demand <- droplevels(subset(AGR_Hist_Energy_Demand, Energy != "total"))
AGR_Activity_Rate <- Extract_Sector(Extract_Item(Proj_Assumption, "Activity Rate"), "AGR")
AGR_Activity_Rate = Sort_By_Country(AGR_Activity_Rate)
AGR_Activity_Rate = AGR_Activity_Rate[ rep( seq_len( nrow( AGR_Activity_Rate ) ), nlevels(as.factor(AGR_Hist_Energy_Demand$Energy)) ), ]
AGR_Activity_Rate$Energy = as.factor(rep(levels(as.factor(AGR_Hist_Energy_Demand$Energy), each = nlevels(as.factor(AGR_Activity_Rate$Country)) )))
AGR_Activity_Rate = AGR_Activity_Rate[order(AGR_Activity_Rate$Energy),]
AGR_Activity_Rate <- droplevels(subset(AGR_Activity_Rate, Energy != "total"))
AGR_Intensity_Rate <- Extract_Sector(Extract_Item(Proj_Assumption, "Energy Intensity"), "AGR")
AGR_Intensity_Rate = Sort_By_Country(AGR_Intensity_Rate)
AGR_Activity_Rate$Energy <- as.factor(AGR_Activity_Rate$Energy)
AGR_Intensity_Rate = AGR_Intensity_Rate[order(AGR_Intensity_Rate$Energy),]
#2. Projection
AGR_Proj_Demand <- AGR_Hist_Energy_Demand
Year_Proj_col = min(which(is.nan(colSums(AGR_Hist_Energy_Demand[10:length(AGR_Hist_Energy_Demand)])))) + 9
for(i in Year_Proj_col:length(AGR_Hist_Energy_Demand))
{
AGR_Proj_Demand[,i] <- AGR_Proj_Demand[,i-1]*(1+AGR_Activity_Rate[,i])  * ( 1+ AGR_Intensity_Rate[,i] )
}
AGR_Proj_Demand$Sub_Sector <- as.factor("total")
AGR_Proj_Demand$Usage <- as.factor("total")
AGR_Proj_Demand <- calculate_total_sector_AGR(AGR_Proj_Demand)
return(AGR_Proj_Demand)
}
main_projection_energy_demand_AGR(Hist_Energy_Demand, Proj_Assumption)
main_projection_energy_demand_AGR <- function(Hist_Energy_Demand, Proj_Assumption)
{
browser()
#1. Data input extraction
AGR_Hist_Energy_Demand <- Extract_Sector(Hist_Energy_Demand, "AGR")
AGR_Hist_Energy_Demand <- Sort_By_Country(AGR_Hist_Energy_Demand)
AGR_Hist_Energy_Demand <- AGR_Hist_Energy_Demand[order(AGR_Hist_Energy_Demand$Energy),]
AGR_Hist_Energy_Demand <- droplevels(subset(AGR_Hist_Energy_Demand, Energy != "total"))
AGR_Activity_Rate <- Extract_Sector(Extract_Item(Proj_Assumption, "Activity Rate"), "AGR")
AGR_Activity_Rate = Sort_By_Country(AGR_Activity_Rate)
AGR_Activity_Rate = AGR_Activity_Rate[ rep( seq_len( nrow( AGR_Activity_Rate ) ), nlevels(as.factor(AGR_Hist_Energy_Demand$Energy)) ), ]
AGR_Activity_Rate$Energy = as.factor( rep( levels( as.factor( AGR_Hist_Energy_Demand$Energy ) ), each = nlevels( as.factor( AGR_Activity_Rate$Country ) ) ) )
AGR_Activity_Rate = AGR_Activity_Rate[order(AGR_Activity_Rate$Energy),]
AGR_Activity_Rate <- droplevels(subset(AGR_Activity_Rate, Energy != "total"))
AGR_Intensity_Rate <- Extract_Sector(Extract_Item(Proj_Assumption, "Energy Intensity"), "AGR")
AGR_Intensity_Rate = Sort_By_Country(AGR_Intensity_Rate)
AGR_Activity_Rate$Energy <- as.factor(AGR_Activity_Rate$Energy)
AGR_Intensity_Rate = AGR_Intensity_Rate[order(AGR_Intensity_Rate$Energy),]
#2. Projection
AGR_Proj_Demand <- AGR_Hist_Energy_Demand
Year_Proj_col = min(which(is.nan(colSums(AGR_Hist_Energy_Demand[10:length(AGR_Hist_Energy_Demand)])))) + 9
for(i in Year_Proj_col:length(AGR_Hist_Energy_Demand))
{
AGR_Proj_Demand[,i] <- AGR_Proj_Demand[,i-1]*(1+AGR_Activity_Rate[,i])  * ( 1+ AGR_Intensity_Rate[,i] )
}
AGR_Proj_Demand$Sub_Sector <- as.factor("total")
AGR_Proj_Demand$Usage <- as.factor("total")
AGR_Proj_Demand <- calculate_total_sector_AGR(AGR_Proj_Demand)
return(AGR_Proj_Demand)
}
main_projection_energy_demand_AGR(Hist_Energy_Demand, Proj_Assumption)
runApp()
runApp()
runApp()
runApp()
runApp()
Q
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
